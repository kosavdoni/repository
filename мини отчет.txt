Для проверки работоспособности операций получения, создания, обновления и удаления вам понадобится использовать клиент для отправки HTTP-запросов к вашему приложению. Этот клиент может быть реализован с использованием различных инструментов на ваш выбор, например, curl, Postman, или язык программирования, такой как Go или Python.

Вот примеры команд, которые можно использовать для проверки работоспособности каждой операции:

- Проверка получения (GET):
  - Curl: curl -X GET http://localhost:port/users
  - Postman: Создайте GET-запрос к URL http://localhost:port/users
  - Go:
    ```go
    package main

    import (
        "fmt"
        "net/http"
        "io/ioutil"
    )

    func main() {
        response, err := http.Get("http://localhost:port/users")
        if err != nil {
            fmt.Println("Error:", err)
            return
        }
        defer response.Body.Close()

        body, err := ioutil.ReadAll(response.Body)
        if err != nil {
            fmt.Println("Error:", err)
            return
        }

        fmt.Println("Response:", string(body))
    }
    ```

- Проверка создания (POST):
  - Curl: curl -X POST -H "Content-Type: application/json" -d '{"name":"John", "email":"john@example.com"}' http://localhost:port/users
  - Postman: Создайте POST-запрос к URL http://localhost:port/users с телом запроса в формате JSON:
        {         "name": "John",         "email": "john@example.com"     }    
  - Go:
    ```go
    package main

    import (
        "bytes"
        "encoding/json"
        "fmt"
        "net/http"
    )

    type User struct {
        Name  string json:"name"
        Email string json:"email"
    }

    func main() {
        user := User{
            Name:  "John",
            Email: "john@example.com",
        }

        requestBody, err := json.Marshal(user)
        if err != nil {
            fmt.Println("Error:", err)
            return
        }

        response, err := http.Post("http://localhost:port/users",
            "application/json", bytes.NewBuffer(requestBody))
        if err != nil {
            fmt.Println("Error:", err)
            return
        }
        defer response.Body.Close()

        fmt.Println("Response:", response.Status)
    }
    ```

- Проверка обновления (PUT/PATCH):
  Для проверки операций обновления, вам нужно убедиться, что в вашем приложении реализован соответствующий обработчик для методов PUT или PATCH и вы можете использовать аналогичные инструменты (curl, Postman или код на Go/Python) для отправки запросов на обновление данных в соответствующем ресурсе.

- Проверка удаления (DELETE):
  - Curl: curl -X DELETE http://localhost:port/users/{id}
  - Postman: Создайте DELETE-запрос к URL http://localhost:port/users/{id}, где {id} - это идентификатор пользователя для удаления.
  - Go:
    ```go
    package main

    import (
        "fmt"
        "net/http"
    )

    func main() {
        request, err := http.NewRequest("DELETE", "http://localhost:port/users/{id}", nil)
        if err != nil {
            fmt.Println("Error:", err)
            return
        }

        response, err := http.DefaultClient.Do(request)
        if err != nil {
            fmt.Println("Error:", err)
            return
        }
        defer response.Body.Close()

        fmt.Println("Response:", response.Status)
    }
    ```

Замените http://localhost:port на соответствующий URL вашего приложения, а {id} - на конкретный идентификатор пользователя или ресурса, с которым вы хотите работать.

    user_repository := &repository.UserRepository{DB: db}
    product_repository := &repository.ProductRepository{DB: db}
    order_repository := &repository.OrderRepository{DB: db}
	orderItem_repository := &repository.OrderItemRepository{DB: db}